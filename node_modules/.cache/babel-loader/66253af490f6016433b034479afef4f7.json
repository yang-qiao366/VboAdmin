{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  CodeMirror.defineOption(\"placeholder\", \"\", function (cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n\n    if (val && !prev) {\n      cm.on(\"blur\", onBlur);\n      cm.on(\"change\", onChange);\n      cm.on(\"swapDoc\", onChange);\n      onChange(cm);\n    } else if (!val && prev) {\n      cm.off(\"blur\", onBlur);\n      cm.off(\"change\", onChange);\n      cm.off(\"swapDoc\", onChange);\n      clearPlaceholder(cm);\n      var wrapper = cm.getWrapperElement();\n      wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\");\n    }\n\n    if (val && !cm.hasFocus()) onBlur(cm);\n  });\n\n  function clearPlaceholder(cm) {\n    if (cm.state.placeholder) {\n      cm.state.placeholder.parentNode.removeChild(cm.state.placeholder);\n      cm.state.placeholder = null;\n    }\n  }\n\n  function setPlaceholder(cm) {\n    clearPlaceholder(cm);\n    var elt = cm.state.placeholder = document.createElement(\"pre\");\n    elt.style.cssText = \"height: 0; overflow: visible\";\n    elt.style.direction = cm.getOption(\"direction\");\n    elt.className = \"CodeMirror-placeholder CodeMirror-line-like\";\n    var placeHolder = cm.getOption(\"placeholder\");\n    if (typeof placeHolder == \"string\") placeHolder = document.createTextNode(placeHolder);\n    elt.appendChild(placeHolder);\n    cm.display.lineSpace.insertBefore(elt, cm.display.lineSpace.firstChild);\n  }\n\n  function onBlur(cm) {\n    if (isEmpty(cm)) setPlaceholder(cm);\n  }\n\n  function onChange(cm) {\n    var wrapper = cm.getWrapperElement(),\n        empty = isEmpty(cm);\n    wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\") + (empty ? \" CodeMirror-empty\" : \"\");\n    if (empty) setPlaceholder(cm);else clearPlaceholder(cm);\n  }\n\n  function isEmpty(cm) {\n    return cm.lineCount() === 1 && cm.getLine(0) === \"\";\n  }\n});","map":{"version":3,"sources":["C:/Users/yangwei/Desktop/my-app/my-app/my-demo/node_modules/codemirror/addon/display/placeholder.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","cm","val","old","prev","Init","on","onBlur","onChange","off","clearPlaceholder","wrapper","getWrapperElement","className","replace","hasFocus","state","placeholder","parentNode","removeChild","setPlaceholder","elt","document","createElement","style","cssText","direction","getOption","placeHolder","createTextNode","appendChild","display","lineSpace","insertBefore","firstChild","isEmpty","empty","lineCount","getLine"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"placeholder\", \"\", function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.on(\"blur\", onBlur);\n      cm.on(\"change\", onChange);\n      cm.on(\"swapDoc\", onChange);\n      onChange(cm);\n    } else if (!val && prev) {\n      cm.off(\"blur\", onBlur);\n      cm.off(\"change\", onChange);\n      cm.off(\"swapDoc\", onChange);\n      clearPlaceholder(cm);\n      var wrapper = cm.getWrapperElement();\n      wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\");\n    }\n\n    if (val && !cm.hasFocus()) onBlur(cm);\n  });\n\n  function clearPlaceholder(cm) {\n    if (cm.state.placeholder) {\n      cm.state.placeholder.parentNode.removeChild(cm.state.placeholder);\n      cm.state.placeholder = null;\n    }\n  }\n  function setPlaceholder(cm) {\n    clearPlaceholder(cm);\n    var elt = cm.state.placeholder = document.createElement(\"pre\");\n    elt.style.cssText = \"height: 0; overflow: visible\";\n    elt.style.direction = cm.getOption(\"direction\");\n    elt.className = \"CodeMirror-placeholder CodeMirror-line-like\";\n    var placeHolder = cm.getOption(\"placeholder\")\n    if (typeof placeHolder == \"string\") placeHolder = document.createTextNode(placeHolder)\n    elt.appendChild(placeHolder)\n    cm.display.lineSpace.insertBefore(elt, cm.display.lineSpace.firstChild);\n  }\n\n  function onBlur(cm) {\n    if (isEmpty(cm)) setPlaceholder(cm);\n  }\n  function onChange(cm) {\n    var wrapper = cm.getWrapperElement(), empty = isEmpty(cm);\n    wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\") + (empty ? \" CodeMirror-empty\" : \"\");\n\n    if (empty) setPlaceholder(cm);\n    else clearPlaceholder(cm);\n  }\n\n  function isEmpty(cm) {\n    return (cm.lineCount() === 1) && (cm.getLine(0) === \"\");\n  }\n});\n"]},"metadata":{},"sourceType":"script"}