{"ast":null,"code":"module.exports = function (hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, {\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/\n    }]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([PREPROCESSOR, {\n      begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      // This mode covers expression context where we can't expect a function\n      // definition and shouldn't highlight anything that looks like one:\n      // `return some()`, `else if()`, `(x*sum(1, 2))`\n      variants: [{\n        begin: /=/,\n        end: /;/\n      }, {\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }],\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat([{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }]),\n      relevance: 0\n    }, {\n      className: 'function',\n      begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n      returnBegin: true,\n      end: /[{;=]/,\n      excludeEnd: true,\n      keywords: CPP_KEYWORDS,\n      illegal: /[^\\w\\s\\*&]/,\n      contains: [{\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [hljs.TITLE_MODE],\n        relevance: 0\n      }, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: CPP_KEYWORDS,\n          relevance: 0,\n          contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n        }]\n      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/yangwei/Desktop/my-app/my-app/my-demo/node_modules/highlight.js/lib/languages/cpp.js"],"names":["module","exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)'\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/, end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  'self',\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};"]},"metadata":{},"sourceType":"script"}